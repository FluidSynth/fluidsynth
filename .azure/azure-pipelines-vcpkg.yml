
trigger:
  paths:
    include:
      - '*'
    exclude:
      - '.azure/azure-pipelines-android.yml'
      - '.azure/azure-pipelines-mac.yml'
      - '.azure/azure-pipelines-win.yml'
      - '.circleci/config.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/sonarcloud.yml'
      - '.cirrus.yml'
      - 'README.md'

variables:
  toolset: 'v142'
  generator: 'Visual Studio 16 2019'

jobs:
- job: vcpkg
  workspace:
    clean: all
  strategy:
    matrix:
      ARM:
        platform: 'ARM'
        cmake_platform: 'ARM'
        configuration: 'Release'
      x86:
        platform: 'x86'
        cmake_platform: 'Win32'
        configuration: 'Release'
      x64:
        platform: 'x64'
        cmake_platform: 'x64'
        configuration: 'Release'
  pool:
    vmImage: 'windows-2019'
  steps:
    - script: |
        @ECHO ON
        echo $(generator)
        echo $(toolset)
        REM choco upgrade ninja -y
        REM ninja --version
        cmake --version
        REM manually update vcpkg
        C:
        cd "%VCPKG_INSTALLATION_ROOT%" || exit -1
        git checkout master || exit -1
        git pull || exit -1
        .\bootstrap-vcpkg.bat || exit -1
      displayName: 'Update vcpkg'
    - script: |
        vcpkg install --only-downloads glib:$(platform)-windows libsndfile:$(platform)-windows
      displayName: 'Download Dependencies'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: specific
        # https://dev.azure.com/tommbrt/_apis/projects?api-version=5.0
        project: 'd3638885-de4a-4ce7-afe7-f237ae461c07'
        pipeline: 1
        artifactName: libinstpatch-$(platform)
        downloadPath: '$(Agent.TempDirectory)'
      displayName: 'Get libinstpatch'
      condition: and(succeeded(), ne(variables.platform, ARM))
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)\libinstpatch-$(platform)'
        Contents: '**'
        TargetFolder: '$(VCPKG_INSTALLATION_ROOT)\installed\$(platform)-windows'
      displayName: 'Install libinstpatch'
      condition: and(succeeded(), ne(variables.platform, ARM))
    - task: Cache@2
      displayName: "Cache vcpkg's packages"
      inputs:
        key: $(VCPKG_INSTALLATION_ROOT)\downloads\* | "$(platform)"
        path: '$(VCPKG_INSTALLATION_ROOT)\installed'
        cacheHitVar: CACHE_RESTORED
    - script: |
        @ECHO ON
        vcpkg install glib:$(platform)-windows libsndfile:$(platform)-windows
      displayName: 'vcpkg build Dependencies'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
    - script: |
        @ECHO ON
        mkdir build
        cd build
        set PKG_CONFIG_PATH='$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows/lib/pkgconfig'
        cmake -Werror=dev -G "$(generator)" -A "$(cmake_platform)" -T "$(toolset)" -Denable-readline=0 -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX='$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows' -DCMAKE_VERBOSE_MAKEFILE=1 -DNO_GUI=1 .. || exit -1
        REM build libfluidsynth and fluidsynth exec
        cmake --build . --config $(configuration) --parallel 3 || exit -1
      displayName: 'Compile fluidsynth'
    - script: |
        @ECHO ON
        REM build and exec unittests, unless when cross-compiling
        if not "%platform%"=="ARM" ( cmake --build build --config $(configuration) --target check --parallel 3 )
      displayName: 'Execute Unittests'
    - script: |
        @ECHO ON
        cd build
        cmake --build . --config $(configuration) --target install || exit -1
        REM del bin\concrt*.dll
        REM del $(Build.ArtifactStagingDirectory)\bin\vcruntime*.dll
        REM del $(Build.ArtifactStagingDirectory)\bin\msvcp*.dll
        REM del $(Build.ArtifactStagingDirectory)\lib\instpatch*.lib
        REM del $(Build.ArtifactStagingDirectory)\lib\pkgconfig\libinstpatch*.pc
        REM rd $(Build.ArtifactStagingDirectory)\include\libinstpatch-2 /s /q
      displayName: 'fluidsynth install'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows/'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: fluidsynth-vcpkg-$(platform)
