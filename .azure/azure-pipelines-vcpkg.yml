
trigger:
  paths:
    include:
      - '*'
    exclude:
      - '.azure/azure-pipelines-android.yml'
      - '.azure/azure-pipelines-mac.yml'
      - '.azure/azure-pipelines-win.yml'
      - '.circleci/config.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/sonarcloud.yml'
      - '.cirrus.yml'
      - 'README.md'

variables:
  toolset: 'v142'
  generator: 'Visual Studio 16 2019'

jobs:
- job: vcpkg
  workspace:
    clean: all
  strategy:
    matrix:
      ARM:
        platform: 'ARM'
        cmake_platform: 'ARM'
        configuration: 'Release'
      ARM64:
        platform: 'ARM64'
        cmake_platform: 'ARM64'
        configuration: 'Release'
      x86:
        platform: 'x86'
        cmake_platform: 'Win32'
        configuration: 'Release'
      x64:
        platform: 'x64'
        cmake_platform: 'x64'
        configuration: 'Release'
  pool:
    vmImage: 'windows-2019'
  steps:
    - bash: |
        set -ex
        echo $(generator)
        echo $(toolset)
        # choco upgrade ninja -y
        # ninja --version
        cmake --version
        # manually update vcpkg
        cd $VCPKG_INSTALLATION_ROOT
        cat << EOF > fix-arm.diff
        From f784414338619dcf8f40c6c6ad1c2faa74d705ff Mon Sep 17 00:00:00 2001
        From: "Moebert, Tom" <tom.moebert@zeiss.com>
        Date: Sat, 15 May 2021 13:39:43 +0200
        Subject: [PATCH] fix arm build

        ---
        ports/glib/portfile.cmake | 2 +-
        1 file changed, 1 insertion(+), 1 deletion(-)

        diff --git a/ports/glib/portfile.cmake b/ports/glib/portfile.cmake
        index 1a0d01a09..980bae16a 100644
        --- a/ports/glib/portfile.cmake
        +++ b/ports/glib/portfile.cmake
        @@ -75,7 +75,7 @@ endif()
         set(GLIB_SCRIPTS gdbus-codegen glib-genmarshal glib-mkenums gtester-report)


        -if(VCPKG_TARGET_IS_WINDOWS AND VCPKG_TARGET_ARCHITECTURE MATCHES "x64|arm64")
        +if(VCPKG_TARGET_IS_WINDOWS AND VCPKG_TARGET_ARCHITECTURE MATCHES "x64|arm")
             list(APPEND GLIB_TOOLS  gspawn-win64-helper${VCPKG_EXECUTABLE_SUFFIX}
                                     gspawn-win64-helper-console${VCPKG_EXECUTABLE_SUFFIX})
         elseif(VCPKG_TARGET_IS_WINDOWS AND VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
        -- 
        2.25.1.windows.1
        EOF
        cat fix-arm.diff | patch -p1
        # git checkout master || exit -1
        # git pull || exit -1
        # .\bootstrap-vcpkg.bat || exit -1
      displayName: 'Update vcpkg'
    - script: |
        vcpkg install --only-downloads glib:$(platform)-windows libsndfile:$(platform)-windows
      displayName: 'Download Dependencies'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: specific
        # https://dev.azure.com/tommbrt/_apis/projects?api-version=5.0
        project: 'd3638885-de4a-4ce7-afe7-f237ae461c07'
        pipeline: 1
        artifactName: libinstpatch-$(platform)
        downloadPath: '$(Agent.TempDirectory)'
      displayName: 'Get libinstpatch'
      condition: and(succeeded(), ne(variables.platform, ARM))
      enabled: 'false'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)\libinstpatch-$(platform)'
        Contents: '**'
        TargetFolder: '$(VCPKG_INSTALLATION_ROOT)\installed\$(platform)-windows'
      displayName: 'Install libinstpatch'
      condition: and(succeeded(), ne(variables.platform, ARM))
      enabled: 'false'
    - task: Cache@2
      displayName: "Cache vcpkg's packages"
      inputs:
        key: $(VCPKG_INSTALLATION_ROOT)\downloads\* | "$(platform)"
        path: '$(VCPKG_INSTALLATION_ROOT)\installed'
        cacheHitVar: CACHE_RESTORED
    - script: |
        @ECHO ON
        vcpkg install glib:$(platform)-windows libsndfile:$(platform)-windows
      displayName: 'vcpkg build Dependencies'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
    - script: |
        @ECHO ON
        mkdir build
        cd build
        set PKG_CONFIG_PATH='$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows/lib/pkgconfig'
        cmake -Werror=dev -G "$(generator)" -A "$(cmake_platform)" -T "$(toolset)" -Denable-readline=0 -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX='$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows' -DCMAKE_VERBOSE_MAKEFILE=1 -DNO_GUI=1 .. || exit -1
        REM build libfluidsynth and fluidsynth exec
        cmake --build . --config $(configuration) --parallel 3 || exit -1
      displayName: 'Compile fluidsynth'
    - script: |
        @ECHO ON
        REM build and exec unittests, unless when cross-compiling
        if not "%platform%"=="ARM" ( cmake --build build --config $(configuration) --target check --parallel 3 )
      displayName: 'Execute Unittests'
    - script: |
        @ECHO ON
        cd build
        cmake --build . --config $(configuration) --target install || exit -1
        REM del bin\concrt*.dll
        REM del $(Build.ArtifactStagingDirectory)\bin\vcruntime*.dll
        REM del $(Build.ArtifactStagingDirectory)\bin\msvcp*.dll
        REM del $(Build.ArtifactStagingDirectory)\lib\instpatch*.lib
        REM del $(Build.ArtifactStagingDirectory)\lib\pkgconfig\libinstpatch*.pc
        REM rd $(Build.ArtifactStagingDirectory)\include\libinstpatch-2 /s /q
      displayName: 'fluidsynth install'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows/'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
      displayName: 'Copy Binaries to Artifact Dir'
    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: fluidsynth-vcpkg-$(platform)
