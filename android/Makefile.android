#
# The public targets in this Makefile are: build, clean, wipe
#
# What `build` target does:
#
# - build cerbero to build glib
# - build glib-2.0.a and many other dependencies
# - build Oboe to build oboe-c
# - build oboe-c to provide oboe features via shared library
# - build libfluidsynth.a using glib and oboe-c (shared)
# - build libfluidsynth.so from libfluidsynth.a and glib and co.
#
PWD=$(shell pwd)
CERBERO=$(PWD)/external/cerbero
OBOE=$(PWD)/external/oboe
OBOE_C=$(PWD)/oboe-c

ANDROID_NDK = $(PWD)/external/cerbero/build/android-ndk-18

ABIS_SIMPLE = x86 x86-64 armv7 arm64


DIST_PATH=$(CERBERO)/build/dist
OBOE_BUILD_PATH=$(OBOE)/build

all: build

.PHONY: prepare
prepare: $(CERBERO) $(OBOE)
	for abi in $(ABIS_SIMPLE) ; do \
		cd $(CERBERO) && ./cerbero-uninstalled -c config/cross-android-$$abi.cbc bootstrap && cd $(PWD) ; \
	done

$(CERBERO):
	git clone https://anongit.freedesktop.org/git/gstreamer/cerbero.git --detach c80d06f $(CERBERO)

$(OBOE):
	git clone https://github.com/google/oboe.git $(OBOE)

.PHONY: build
build: build-oboe build-cerbero build-fluidsynth dist-fluidsynth

.PHONY: build-cerbero
build-cerbero:
	for abi in $(ABIS_SIMPLE) ; do \
		cd $(CERBERO) && ./cerbero-uninstalled -c config/cross-android-$$abi.cbc build glib && cd $(PWD) ; \
	done

define run_make_abi_target
	make -f Makefile.android BUILD_ABI=$(1) A_ABI=$(2) $(3)
endef
define run_make_abi_target-unsafe
	if make -f Makefile.android BUILD_ABI=$(1) A_ABI=$(2) $(3) ; then \
		echo "ignore failure for $(1)..." ; \
	fi
endef

define run_make_for_all_abi
	$(call run_make_abi_target,x86,x86,$(1) )
	$(call run_make_abi_target,x86_64,x86_64,$(1) )
	$(call run_make_abi_target,armv7,armeabi-v7a,$(1) )
	$(call run_make_abi_target-unsafe,arm64,arm64-v8a,$(1) )
endef

.PHONY: dist-fluidsynth
dist-fluidsynth:
	$(call run_make_for_all_abi, dist-fluidsynth-one)

.PHONY: dist-dep
dist-dep:
	$(call run_make_for_all_abi, dist-dep-one)

.PHONY: build-oboe
build-oboe:
	$(call run_make_for_all_abi, build-oboe-one)

.PHONY: build-fluidsynth
build-fluidsynth:
	$(call run_make_for_all_abi, build-fluidsynth-one)

build-fluidsynth-one:
	mkdir -p build/$(A_ABI) && cd build/$(A_ABI) && \
	LD_RUN_PATH=$(DIST_PATH)/android-$(BUILD_ABI)/lib LD_LIBRARY_PATH=$(DIST_PATH)/android_$(BUILD_ABI)/lib PKG_CONFIG_PATH=$(DIST_PATH)/android_$(BUILD_ABI)/lib/pkgconfig/ \
	cmake -DCMAKE_TOOLCHAIN_FILE=$(ANDROID_NDK)/build/cmake/android.toolchain.cmake -Denable-opensles=on -Denable-oboe=on -Denable-jack=off -Denable-oss=off -Denable-pulseaudio=off -Denable-libsndfile=off -Denable-dbus=off -Denable-debug=on -DANDROID_NATIVE_API_LEVEL=android-27 -DANDROID_PLATFORM=android-27 -DANDROID_ABI=$(A_ABI) ../../.. && make

build-oboe-one:
	mkdir -p $(OBOE)/build/$(A_ABI) && cd $(OBOE)/build/$(A_ABI) && \
		cmake -DCMAKE_TOOLCHAIN_FILE=$(ANDROID_NDK)/build/cmake/android.toolchain.cmake -DANDROID_ABI=$(A_ABI) -DANDROID_NATIVE_API_LEVEL=android-27 -DANDROID_PLATFORM=android-27 ../.. && make

dist-dep-one:
	mkdir -p dep/$(A_ABI) && cd dep/$(A_ABI) && \
	cp $(DIST_PATH)/android_$(BUILD_ABI)/lib/*.a . && \
	cp ../../build/$(A_ABI)/src/*.a . && \
	cp $(OBOE_BUILD_PATH)/$(A_ABI)/*.a . && \
	cd ../../

dist-fluidsynth-one:
	mkdir -p dist/$(A_ABI) && cd dist/$(A_ABI) && cp ../../build/$(A_ABI)/src/libfluidsynth.so . && cd ../..

clean:
	rm -rf dist/* build/* external/oboe/build/* obj/local/*

.PHONY: wipe
wipe: $(CERBERO)
	for abi in $(ABIS_SIMPLE) ; do \
		cd $(CERBERO) && ./cerbero-uninstalled -c config/cross-android-$$abi.cbc wipe && cd ../.. ; \
	done
