
variables:
  ICONV_VERSION: '1.16'
  FFI_VERSION: '3.3'
  GETTEXT_VERSION: '0.21'
  #need to switch to meson build system to use a more recent version 
  GLIB_VERSION: '2.62'
  GLIB_EXTRAVERSION: '6'
  OBOE_VERSION: '1.5.0'
  SNDFILE_VERSION: '1.0.31'
  INSTPATCH_VERSION: '1.1.6'

  # Android NDK sources and standalone toolchain is put here
  DEV: '$(System.DefaultWorkingDirectory)/android-build-root'

  # This is a symlink pointing to the real Android NDK
  # Must be the same as $ANDROID_NDK_HOME see:
  # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
  NDK: '/usr/local/lib/android/sdk/ndk-bundle'

  # All the built binaries, libs and their headers will be installed here
  PREFIX: '$(DEV)/opt/android'

  # The path of standalone NDK toolchain
  # Refer to https://developer.android.com/ndk/guides/standalone_toolchain.html
  NDK_TOOLCHAIN: '$(NDK)/toolchains/llvm/prebuilt/linux-x86_64/'

  # Don't mix up .pc files from your host and build target
  PKG_CONFIG_PATH: '$(PREFIX)/lib/pkgconfig'
  # setting PKG_CONFIG_PATH alone does not seem to be enough to avoid mixing up with the host, also set PKG_CONFIG_LIBDIR
  PKG_CONFIG_LIBDIR: '$(PKG_CONFIG_PATH)'

  # Set Android target API level
  # when compiling with clang use at least 28 as this makes sure that android provides the posix_spawn functions, so the compilation of gettext will (should) work out of the box
  # it's probably a bug of gettext, if posix_spawn is not available it replaces it with its own implementation. Autotools of gettext set HAVE_POSIX_SPAWN==0 (which is correct) but for some reason REPLACE_POSIX_SPAWN==0 (which is wrong, as it should be 1).
  # 
  # NOTE: With NDK r21d and updated packages everything is fine using api 23. Using api 28 makes the generated library not compatible with android 8 and below devices (missing some symbols in system libraries)
  ANDROID_API: '23'

  # Tell configure what flags Android requires.
  # Using C99 for all compilations by default. Turn Wimplicit-function-declaration into errors. Else autotools will be fooled when checking for available functions (that in fact are NOT available) and compilation will fail later on.
  # Also disable clangs integrated assembler, as the hand written assembly of libffi is not recognized by it, cf. https://crbug.com/801303
  CFLAGS: "-fPIE -fPIC -I$(PREFIX)/include --sysroot=$(NDK_TOOLCHAIN)/sysroot -I$(NDK_TOOLCHAIN)/sysroot/include -Werror=implicit-function-declaration -fno-integrated-as"
  CXXFLAGS: $(CFLAGS)
  CPPFLAGS: $(CXXFLAGS)
  LDFLAGS: "-pie -Wl,-rpath-link=-I$(NDK_TOOLCHAIN)/sysroot/usr/lib -L$(NDK_TOOLCHAIN)/sysroot/usr/lib -L$(PREFIX)/lib -L$(NDK_TOOLCHAIN)/lib"

  ARTIFACT_NAME: 'fluidsynth-android$(ANDROID_API)'

jobs:
- job: Android
  strategy:
    matrix:
      ARM:
        ARCH: 'arm'
        ANDROID_ARCH: 'armv7a'
        ANDROID_ABI_CMAKE: 'armeabi-v7a'
        ANDROID_TARGET_ABI: "eabi"
        # the --target to be used by autotools
        #AUTOTOOLS_TARGET: "$(ARCH)-linux-android$(ANDROID_TARGET_ABI)"
        AUTOTOOLS_TARGET: "$(ARCH)-none-linux-$(ANDROID_TARGET_ABI)"
      AARCH64:
        ARCH: 'aarch64'
        ANDROID_ARCH: 'aarch64'
        ANDROID_ABI_CMAKE: 'arm64-v8a'
        ANDROID_TARGET_ABI:
        AUTOTOOLS_TARGET: "$(ARCH)-linux-android"
      i686:
        ARCH: 'i686'
        ANDROID_ARCH: 'i686'
        ANDROID_ABI_CMAKE: 'x86'
        ANDROID_TARGET_ABI:
        #AUTOTOOLS_TARGET: "$(ARCH)-pc-linux-android"
        AUTOTOOLS_TARGET: "$(ARCH)-pc-linux"
      x86_64:
        ARCH: 'x86_64'
        ANDROID_ARCH: 'x86_64'
        ANDROID_ABI_CMAKE: 'x86_64'
        ANDROID_TARGET_ABI:
        #AUTOTOOLS_TARGET: "$(ARCH)-pc-linux-android"
        AUTOTOOLS_TARGET: "$(ARCH)-pc-linux"

  pool:
    vmImage: 'ubuntu-20.04'

  steps:
    - script: |
        set -ex
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install gettext zlib1g-dev autogen automake autoconf libtool pkg-config autotools-dev build-essential meson ninja-build
      displayName: 'apt-get install'

    - script: |
        set -ex
        mkdir -p $(DEV)
      displayName: 'mkdir $(DEV)'

    - script: |
        set -ex

        wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz
        tar zxvf libiconv-${ICONV_VERSION}.tar.gz

        wget -O libffi-${FFI_VERSION}.tar.gz https://github.com/libffi/libffi/archive/refs/heads/master.tar.gz
        tar zxvf libffi-${FFI_VERSION}.tar.gz

        wget http://ftp.gnu.org/pub/gnu/gettext/gettext-${GETTEXT_VERSION}.tar.gz
        tar zxvf gettext-${GETTEXT_VERSION}.tar.gz

        wget http://ftp.gnome.org/pub/gnome/sources/glib/${GLIB_VERSION}/glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}.tar.xz
        tar xvf glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}.tar.xz

        wget -O oboe-${OBOE_VERSION}.tar.gz https://github.com/google/oboe/archive/${OBOE_VERSION}.tar.gz
        tar zxvf oboe-${OBOE_VERSION}.tar.gz

        wget https://github.com/libsndfile/libsndfile/releases/download/${SNDFILE_VERSION}/libsndfile-${SNDFILE_VERSION}.tar.bz2
        tar jxvf libsndfile-${SNDFILE_VERSION}.tar.bz2

        wget -O libinstpatch-${INSTPATCH_VERSION}.tar.gz https://github.com/swami/libinstpatch/archive/refs/tags/v${INSTPATCH_VERSION}.tar.gz
        tar zxvf libinstpatch-${INSTPATCH_VERSION}.tar.gz

      displayName: 'Download Dependencies'
      workingDirectory: $(DEV)

    - script: |
        set -e

        # The cross-compile toolchain we use
        export ANDROID_TARGET=${ARCH}-linux-android${ANDROID_TARGET_ABI}
        echo "##vso[task.setvariable variable=ANDROID_TARGET]$ANDROID_TARGET"

        export ANDROID_TARGET_API=${ANDROID_ARCH}-linux-android${ANDROID_TARGET_ABI}${ANDROID_API}
        echo "##vso[task.setvariable variable=ANDROID_TARGET_API]$ANDROID_TARGET_API"

        # Add the standalone toolchain to the search path.
        export PATH=$PATH:${PREFIX}/bin:${PREFIX}/lib:${PREFIX}/include:${NDK_TOOLCHAIN}/bin
        echo "##vso[task.setvariable variable=PATH]$PATH"

        # Tell configure what tools to use.
        export AR=${ANDROID_TARGET}-ar
        echo "##vso[task.setvariable variable=AR]$AR"
        export AS=${ANDROID_TARGET_API}-clang
        echo "##vso[task.setvariable variable=AS]$AS"
        export CC=${ANDROID_TARGET_API}-clang
        echo "##vso[task.setvariable variable=CC]$CC"
        export CXX=${ANDROID_TARGET_API}-clang++
        echo "##vso[task.setvariable variable=CXX]$CXX"
        export LD=ld.lld
        echo "##vso[task.setvariable variable=LD]$LD"
        export STRIP=${ANDROID_TARGET}-strip
        echo "##vso[task.setvariable variable=STRIP]$STRIP"
        export RANLIB=${ANDROID_TARGET}-ranlib
        echo "##vso[task.setvariable variable=RANLIB]$RANLIB"
      displayName: 'Set environment variables'

    - script: |
        set -ex

        pushd libiconv-${ICONV_VERSION}
        ./configure \
          --host=${AUTOTOOLS_TARGET} \
          --prefix=${PREFIX} \
          --disable-rpath \
          --enable-static \
          --enable-shared \
          --with-pic \
          --disable-maintainer-mode \
          --disable-silent-rules \
          --disable-gtk-doc \
          --disable-introspection \
          --disable-nls
        make -j$((`nproc`+1))
        make install
        popd
  
      displayName: 'Compile libiconv'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        # pushd libffi-${FFI_VERSION}
        pushd libffi-master
        NOCONFIGURE=true autoreconf -v -i
        # install headers into the conventional ${PREFIX}/include rather than ${PREFIX}/lib/libffi-3.2.1/include.
        #sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' -i include/Makefile.in
        #sed -e '/^includedir/ s/=.*$/=@includedir@/' -e 's/^Cflags: -I${includedir}/Cflags:/' -i libffi.pc.in
        ./configure --host=${AUTOTOOLS_TARGET} --prefix=${PREFIX} --enable-shared
        make -j$((`nproc`+1))
        make install
        popd
      displayName: 'Compile libffi'
      workingDirectory: $(DEV)

    - script: |
        set -ex
        export PKGCFG=`which pkg-config`
        pushd glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}

        cat << EOF > cross-file.txt
        [host_machine]
        system = 'android'
        cpu_family = 'arm'
        cpu = 'arm'
        endian = 'little'

        [binaries]
        c = '${CC}'
        cpp = '${CXX}'
        ar = '${AR}'
        ld = '${LD}'
        strip = '${STRIP}'
        pkgconfig = '${PKGCFG}'

        [built-in options]
        c_std = 'c11'
        c_args = ['-fPIC','-I/home/git/work/ndk/builddir/out/include']
        cpp_args = ['-fPIC','-I/home/git/work/ndk/builddir/out/include']
        c_link_args = ['-fPIE','-L/home/git/work/ndk/builddir/out/lib']

        pkg_config_path = '${PKG_CONFIG_PATH}'
        EOF

        cat << EOF > native-file.txt
        [host_machine]
        system = 'linux'
        cpu_family = 'x86_64'
        cpu = 'x86_64'
        endian = 'little'

        [properties]

        [binaries]
        c = ['false']
        cpp = ['false']
        objc = ['false']
        objcpp = ['false']
        ar = ['false']
        pkgconfig = ['false']
        cmake = ['false']
        EOF

        cat native-file.txt
        cat cross-file.txt

        unexport AR
        unexport AS
        unexport CC
        unexport CFLAGS
        unexport CPPFLAGS
        unexport CPP
        unexport CXXFLAGS
        unexport CXX
        unexport LDFLAGS
        unexport LD
        unexport STRIP

        meson \
          --cross-file cross-file.txt \
          --native-file native-file.txt \
          --prefix=${PREFIX} \
          --libdir=lib \
          -Ddebug=false \
          --default-library=both \
          -Doptimization=s \
          --backend=ninja \
          --wrap-mode=nodownload \
          -Dinternal_pcre=true \
          -Dlibmount=false \
          -Ddtrace=false \
          -Diconv=auto \
          -Dxattr=false \
          -Dgtk_doc=false \
          _builddir \
          .
        ninja
        popd
      displayName: 'Compile glib (meson)'
      workingDirectory: $(DEV)

    - script: |
        pushd glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}
        cat _builddir/meson-logs/meson-log.txt
        popd
      displayName: 'Meson LOG'
      workingDirectory: $(DEV)
      condition: failed()

    - script: |
        set -ex

        pushd gettext-${GETTEXT_VERSION}
        ./configure \
          --host=${AUTOTOOLS_TARGET} \
          --prefix=${PREFIX} \
          --disable-rpath \
          --disable-libasprintf \
          --disable-java \
          --disable-native-java \
          --disable-openmp \
          --disable-curses \
          --enable-static \
          --enable-shared \
          --with-pic  \
          --disable-maintainer-mode \
          --disable-silent-rules \
          --disable-gtk-doc \
          --disable-introspection
        make -j$((`nproc`+1))
        make install
        popd
      displayName: 'Compile gettext'
      continueOnError: 'true'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        pushd glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}
        cat << EOF > android.cache
        glib_cv_long_long_format=ll
        glib_cv_stack_grows=no
        glib_cv_sane_realloc=yes
        glib_cv_have_strlcpy=no
        glib_cv_va_val_copy=yes
        glib_cv_rtldglobal_broken=no
        glib_cv_uscore=no
        glib_cv_monotonic_clock=no
        ac_cv_func_nonposix_getpwuid_r=no
        ac_cv_func_posix_getpwuid_r=no
        ac_cv_func_posix_getgrgid_r=no
        glib_cv_use_pid_surrogate=yes
        ac_cv_func_printf_unix98=no
        ac_cv_func_vsnprintf_c99=yes
        ac_cv_func_realloc_0_nonnull=yes
        ac_cv_func_realloc_works=yes
        EOF

        chmod a-x android.cache
        NOCONFIGURE=true ./autogen.sh
        ./configure \
          --host=${ANDROID_TARGET} \
          --prefix=${PREFIX} \
          --disable-dependency-tracking \
          --cache-file=android.cache \
          --enable-included-printf \
          --with-pcre=no \
          --enable-libmount=no \
          --enable-xattr=no \
          --with-libiconv=gnu \
          --enable-static \
          --enable-shared \
          --with-pic \
          --disable-maintainer-mode \
          --disable-silent-rules
        make -j$((`nproc`+1))
        make install
        popd
      displayName: 'Compile glib'
      workingDirectory: $(DEV)
      enabled: 'false'

    - script: |
        set -ex

        pushd libsndfile-${SNDFILE_VERSION}
        ./configure \
          --host=${ANDROID_TARGET} \
          --prefix=${PREFIX} \
          --disable-static \
          --enable-shared \
          --enable-external-libs \
          --with-pic \
          --disable-silent-rules
        make -j$((`nproc`+1))
        make install
        popd
      displayName: 'Compile libsndfile'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        pushd oboe-${OBOE_VERSION}
        mkdir -p build
        pushd build
        cmake -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=make \
            -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_API} \
            -DANDROID_ABI=${ANDROID_ABI_CMAKE} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DBUILD_SHARED_LIBS=1 .. \
            -DCMAKE_VERBOSE_MAKEFILE=1
        make -j$((`nproc`+1))
        # need to manually install oboe as it doesn't provide an install target
        #${RANLIB} liboboe.a
        cp liboboe.* ${PREFIX}/lib/
        cp -ur ../include/oboe ${PREFIX}/include
        # create a custom pkgconfig file for oboe to allow fluidsynth to find it
        cat << EOF > ${PKG_CONFIG_PATH}/oboe-1.0.pc
        prefix=${PREFIX}
        exec_prefix=\${prefix}
        libdir=\${prefix}/lib
        includedir=\${prefix}/include

        Name: Oboe
        Description: Oboe library
        Version: ${OBOE_VERSION}
        Libs: -L\${libdir} -loboe -landroid -llog -lstdc++
        Cflags: -I\${includedir}
        EOF

        popd
        popd
      displayName: 'Compile Oboe'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        pushd libinstpatch-${INSTPATCH_VERSION}
        mkdir -p build
        pushd build

        cmake -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=make \
            -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_API} \
            -DANDROID_ABI=${ANDROID_ABI_CMAKE} \
            -DANDROID_TOOLCHAIN=${CC} \
            -DANDROID_NDK=${NDK} \
            -DCMAKE_INSTALL_PREFIX=${PREFIX} \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            ..
        make -j$((`nproc`+1))
        make install

        popd
        popd
      displayName: 'Compile libinstpatch'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        mkdir -p build
        pushd build
        cmake -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=make \
            -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_API} \
            -DANDROID_ABI=${ANDROID_ABI_CMAKE} \
            -DANDROID_TOOLCHAIN=${CC} \
            -DANDROID_NDK=${NDK} \
            -DCMAKE_INSTALL_PREFIX=$(PREFIX) \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -Denable-opensles=1 \
            -Denable-floats=1 \
            -Denable-oboe=1 \
            -Denable-dbus=0 \
            -Denable-oss=0 ..
        make -j$((`nproc`+1))

        popd
      displayName: 'Compile fluidsynth'

    - script: |
        set -x
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(PREFIX)/lib:$(NDK_TOOLCHAIN)/sysroot/usr/lib/$(ARCH)-linux-android$(ANDROID_TARGET_ABI)/$(ANDROID_API)
        pushd build
        make -j$((`nproc`+1)) check
        ldd test/test_sample_cache
        popd
      displayName: 'Execute fluidsynth unit test'
      condition: and(succeeded(), in(variables['ARCH'], 'x86_64', 'i686'))
      enabled: 'false'

    - script: |
        set -ex
        pushd build
        make install
        popd
      displayName: 'Install fluidsynth'

    - script: |
        ls -Rg $(PREFIX)
      displayName: 'Show cross-compiled files in $(PREFIX)'
      condition: always()

    - script: |
        set -ex
        mkdir -p $(Build.ArtifactStagingDirectory)/$(ARCH)
        cd $(Build.ArtifactStagingDirectory)/$(ARCH)
        cp -a $(PREFIX)/lib/* .
        ls -Rg .
        rm -rf *.dll *.alias *gettext* libtextstyle.* *.a *.la
      displayName: 'Collecting artifacts'
          
    - task: PublishBuildArtifacts@1
      displayName: 'Publishing Artefacts for Android API$(ANDROID_API) $(ARCH)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(ARTIFACT_NAME)'
        publishLocation: 'Container'
