
variables:
  ICONV_VERSION: '1.16'
  FFI_VERSION: '3.3'
  GETTEXT_VERSION: '0.21'
  #need to switch to meson build system to use a more recent version 
  GLIB_VERSION: '2.58'
  GLIB_EXTRAVERSION: '3'
  OBOE_VERSION: '1.5.0'
  
  # Android NDK sources and standalone toolchain is put here
  DEV: '$(System.DefaultWorkingDirectory)/android-build-root'

  # This is a symlink pointing to the real Android NDK
  # Must be the same as $ANDROID_NDK_HOME see:
  # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
  NDK: '/usr/local/lib/android/sdk/ndk-bundle'

  # All the built binaries, libs and their headers will be installed here
  PREFIX: '$(DEV)/opt/android'

  # The path of standalone NDK toolchain
  # Refer to https://developer.android.com/ndk/guides/standalone_toolchain.html
  NDK_TOOLCHAIN: '$(NDK)/toolchains/llvm/prebuilt/linux-x86_64/'

  # Don't mix up .pc files from your host and build target
  PKG_CONFIG_PATH: '$(PREFIX)/lib/pkgconfig'
  # setting PKG_CONFIG_PATH alone does not seem to be enough to avoid mixing up with the host, also set PKG_CONFIG_LIBDIR
  PKG_CONFIG_LIBDIR: '$(PKG_CONFIG_PATH)'

  # Set Android target API level
  # when compiling with clang use at least 28 as this makes sure that android provides the posix_spawn functions, so the compilation of gettext will (should) work out of the box
  # it's probably a bug of gettext, if posix_spawn is not available it replaces it with its own implementation. Autotools of gettext set HAVE_POSIX_SPAWN==0 (which is correct) but for some reason REPLACE_POSIX_SPAWN==0 (which is wrong, as it should be 1).
  # 
  # NOTE: With NDK r21d and updated packages everything is fine using api 23. Using api 28 makes the generated library not compatible with android 8 and below devices (missing some symbols in system libraries)
  ANDROID_API: '23'

  # Tell configure what flags Android requires.
  # Using C99 for all compilations by default. Turn Wimplicit-function-declaration into errors. Else autotools will be fooled when checking for available functions (that in fact are NOT available) and compilation will fail later on.
  # Also disable clangs integrated assembler, as the hand written assembly of libffi is not recognized by it, cf. https://crbug.com/801303
  CFLAGS: "-fPIE -fPIC -I$(PREFIX)/include --sysroot=$(NDK_TOOLCHAIN)/sysroot -I$(NDK_TOOLCHAIN)/sysroot/include -Werror=implicit-function-declaration -fno-integrated-as"
  CXXFLAGS: $(CFLAGS)
  CPPFLAGS: $(CXXFLAGS)
  LDFLAGS: "-pie -Wl,-rpath-link=-I$(NDK_TOOLCHAIN)/sysroot/usr/lib -L$(NDK_TOOLCHAIN)/sysroot/usr/lib -L$(PREFIX)/lib -L$(NDK_TOOLCHAIN)/lib"

jobs:
- job: Android
  strategy:
    matrix:
      ARM:
        ARCH: 'arm'
        ANDROID_ARCH: 'armv7a'
        ANDROID_ABI_CMAKE: 'armeabi-v7a'
        ANDROID_TARGET_ABI: "eabi"
      AARCH64:
        ARCH: 'aarch64'
        ANDROID_ARCH: 'aarch64'
        ANDROID_ABI_CMAKE: 'arm64-v8a'
        ANDROID_TARGET_ABI:
      i686:
        ARCH: 'i686'
        ANDROID_ARCH: 'i686'
        ANDROID_ABI_CMAKE: 'x86'
        ANDROID_TARGET_ABI:
      x86_64:
        ARCH: 'x86_64'
        ANDROID_ARCH: 'x86_64'
        ANDROID_ABI_CMAKE: 'x86_64'
        ANDROID_TARGET_ABI:

  pool:
    vmImage: 'ubuntu-20.04'

  steps:
    - script: |
        mkdir -p $(DEV)
      displayName: 'mkdir $(DEV)'

    - script: |
        set -ex

        wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz
        tar zxvf libiconv-${ICONV_VERSION}.tar.gz

        wget ftp://sourceware.org/pub/libffi/libffi-${FFI_VERSION}.tar.gz
        tar zxvf libffi-${FFI_VERSION}.tar.gz

        wget http://ftp.gnu.org/pub/gnu/gettext/gettext-${GETTEXT_VERSION}.tar.gz
        tar zxvf gettext-${GETTEXT_VERSION}.tar.gz

        wget http://ftp.gnome.org/pub/gnome/sources/glib/${GLIB_VERSION}/glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}.tar.xz
        tar xvf glib-${GLIB_VERSION}.${GLIB_EXTRAVERSION}.tar.xz

        wget https://github.com/google/oboe/archive/${OBOE_VERSION}.tar.gz
        tar zxvf ${OBOE_VERSION}.tar.gz

      displayName: 'Download Dependencies'
      workingDirectory: $(DEV)

    - script: |
        set -ex

        # The cross-compile toolchain we use
        export ANDROID_TARGET=${ARCH}-linux-android${ANDROID_TARGET_ABI}
        echo "##vso[task.setvariable variable=ANDROID_TARGET]$ANDROID_TARGET"

        export ANDROID_TARGET_API=${ANDROID_ARCH}-linux-android${ANDROID_TARGET_ABI}${ANDROID_API}
        echo "##vso[task.setvariable variable=ANDROID_TARGET_API]$ANDROID_TARGET_API"

        # the --target to be used by autotools
        if [ -z ${ANDROID_TARGET_ABI} ]
        then
          export TARGET="${ARCH}"
        else
          export TARGET="${ARCH}-${ANDROID_TARGET_ABI}"
        fi
        echo "##vso[task.setvariable variable=TARGET]$TARGET"
        echo "task.setvariable variable=TARGET]${TARGET}"
        echo "task.setvariable variable=TARGET]$TARGET"

        # Add the standalone toolchain to the search path.
        export PATH=$PATH:${PREFIX}/bin:${PREFIX}/lib:${PREFIX}/include:${NDK_TOOLCHAIN}/bin
        echo "##vso[task.setvariable variable=PATH]$PATH"

        # Tell configure what tools to use.
        export AR=${ANDROID_TARGET}-ar
        echo "##vso[task.setvariable variable=AR]$AR"
        export AS=${ANDROID_TARGET_API}-clang
        echo "##vso[task.setvariable variable=AS]$AS"
        export CC=${ANDROID_TARGET_API}-clang
        echo "##vso[task.setvariable variable=CC]$CC"
        export CXX=${ANDROID_TARGET_API}-clang++
        echo "##vso[task.setvariable variable=CXX]$CXX"
        export LD=${ANDROID_TARGET}-ld
        echo "##vso[task.setvariable variable=LD]$LD"
        export STRIP=${ANDROID_TARGET}-strip
        echo "##vso[task.setvariable variable=STRIP]$STRIP"
        export RANLIB=${ANDROID_TARGET}-ranlib
        echo "##vso[task.setvariable variable=RANLIB]$RANLIB"
      displayName: 'Set environment variables'

    - script: |
        # Android cross-compile environment setup script for Glib
        # Author  : Zengwen Yuan
        # Date    : 2016-07-16
        # License : Creative Commons Attribution-ShareAlike 4.0
        # http://zwyuan.github.io/2016/07/17/cross-compile-glib-for-android/
        #
        # Modified by Tom Moebert to provide an Android cross compilation toolchain for fluidsynth 2.0
        # Date: 2018-09-06

        set -ex

        # Create a standalone toolchain first, see https://developer.android.com/ndk/guides/standalone_toolchain
        #${NDK}/build/tools/make_standalone_toolchain.py --arch ${ANDROID_ARCH} --api ${ANDROID_API} --stl=libc++ --install-dir=${NDK_TOOLCHAIN}

        #WARNING:__main__:make_standalone_toolchain.py is no longer necessary. The
        #$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin directory contains target-specific scripts that perform
        #the same task. For example, instead of:

        #    $ python $NDK/build/tools/make_standalone_toolchain.py \
        #        --arch arm --api 28 --install-dir toolchain
        #    $ toolchain/bin/clang++ src.cpp

        #Instead use:

        #    $ $NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_API}-clang++ src.cpp

        echo $TARGET

        pushd libiconv-${ICONV_VERSION}
        ./configure --host=$TARGET --prefix=${PREFIX} --disable-rpath
        make -j$((`nproc`+1))
        make install
        popd

        pushd libffi-${FFI_VERSION}
        # install headers into the conventional ${PREFIX}/include rather than ${PREFIX}/lib/libffi-3.2.1/include.
        sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' -i include/Makefile.in
        sed -e '/^includedir/ s/=.*$/=@includedir@/' -e 's/^Cflags: -I${includedir}/Cflags:/' -i libffi.pc.in
        ./configure --host=${TARGET} --prefix=${PREFIX} --enable-static
        make -j$((`nproc`+1))
        make install
        popd

        pushd gettext-${GETTEXT_VERSION}
        ./configure --host=${TARGET}  --prefix=${PREFIX} --disable-rpath --disable-libasprintf --disable-java --disable-native-java --disable-openmp --disable-curses
        make -j$((`nproc`+1))
        make install
        popd

        pushd glib-${GLIB_VERSION}
        cat << EOF > android.cache
        glib_cv_long_long_format=ll
        glib_cv_stack_grows=no
        glib_cv_sane_realloc=yes
        glib_cv_have_strlcpy=no
        glib_cv_va_val_copy=yes
        glib_cv_rtldglobal_broken=no
        glib_cv_uscore=no
        glib_cv_monotonic_clock=no
        ac_cv_func_nonposix_getpwuid_r=no
        ac_cv_func_posix_getpwuid_r=no
        ac_cv_func_posix_getgrgid_r=no
        glib_cv_use_pid_surrogate=yes
        ac_cv_func_printf_unix98=no
        ac_cv_func_vsnprintf_c99=yes
        ac_cv_func_realloc_0_nonnull=yes
        ac_cv_func_realloc_works=yes
        EOF

        chmod a-x android.cache
        NOCONFIGURE=true ./autogen.sh
        ./configure --host=${ANDROID_TARGET} --prefix=${PREFIX} --disable-dependency-tracking --cache-file=android.cache --enable-included-printf --enable-static --with-pcre=no --enable-libmount=no --with-libiconv=gnu
        make -j$((`nproc`+1))
        make install
        popd

        pushd oboe-${OBOE_VERSION}
        mkdir -p build
        pushd build
        cmake -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=make \
            -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_API} \
            -DANDROID_ABI=${ANDROID_ABI_CMAKE} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DBUILD_SHARED_LIBS=0 .. \
            -DCMAKE_VERBOSE_MAKEFILE=1
        make -j$((`nproc`+1))
        # need to manually install oboe as it doesn't provide an install target
        ${RANLIB} liboboe.a
        cp liboboe.a* ${PREFIX}/lib/
        cp -ur ../include/oboe ${PREFIX}/include
        # create a custom pkgconfig file for oboe to allow fluidsynth to find it
        cat << EOF > ${PKG_CONFIG_PATH}/oboe-1.0.pc
        prefix=${PREFIX}
        exec_prefix=\${prefix}
        libdir=\${prefix}/lib
        includedir=\${prefix}/include

        Name: Oboe
        Description: Oboe library
        Version: ${OBOE_VERSION}
        Libs: -L\${libdir} -loboe -landroid -llog -lstdc++
        Cflags: -I\${includedir}
        EOF

        popd
        popd

        FLUIDSYNTH_VERSION=2.1.5
        #wget https://github.com/FluidSynth/fluidsynth/archive/v${FLUIDSYNTH_VERSION}.tar.gz
        #tar zxvf v${FLUIDSYNTH_VERSION}.tar.gz
        pushd fluidsynth-${FLUIDSYNTH_VERSION}
        mkdir -p build
        pushd build
        cmake -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=make \
            -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_NATIVE_API_LEVEL=${ANDROID_API} \
            -DANDROID_ABI=${ANDROID_ABI_CMAKE} \
            -DANDROID_TOOLCHAIN=${CC} \
            -DANDROID_NDK=${NDK} \
            -DCMAKE_INSTALL_PREFIX=${PREFIX} \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -Denable-libsndfile=0 \
            -Denable-opensles=1 \
            -Denable-oboe=1 \
            -Denable-dbus=0 \
            -Denable-oss=0 ..
        make -j$((`nproc`+1))

        #correcting src/gentables/CMakeCache.txt
        #sed -i s,'^CMAKE_C_FLAGS:STRING=.*','CMAKE_C_FLAGS:STRING=-fPIE -fPIC -I/usr/include -Werror=implicit-function-declaration',g src/gentables/CMakeCache.txt
        #make -j$((`nproc`+1))


        make install
        popd
        popd
      displayName: 'Compile everything'
      workingDirectory: $(DEV)